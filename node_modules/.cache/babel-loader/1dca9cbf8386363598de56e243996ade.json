{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Calum\\\\Documents\\\\Coding\\\\Foreign Language Films\\\\src\\\\Tmdb.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport './custom.css';\nimport FilmInfo from './FilmInfo';\nimport Recommend from './Recommend';\nimport AddFilm from './AddFilm';\nexport default class Tmdb extends React.Component {\n  constructor(props) {\n    super(props);\n    this.i = 2;\n    this.apiData = [];\n    this.url = 'https://api.themoviedb.org/3/account/{account_id}/watchlist/movies?api_key=d1e40fddb73df31e61693cbf7ef094aa&session_id=d38ef9ba5672c0c9660f9bdd47b123bf609c2a13';\n    this.state = {\n      foreignFilms: [],\n      englishFilms: [],\n      percentage: 0\n    };\n\n    this.refresher = () => {\n      axios.get(this.url + '&sort_by=created_at.desc').then(x => {\n        this.apiData.push(x.data.results[0]);\n        this.organiseData();\n      });\n    };\n\n    this.refresher = this.refresher.bind(this);\n  }\n\n  getAllPages() {\n    axios.get(this.url + '&page=' + this.i).then(x => {\n      this.apiData.push(...x.data.results);\n      this.i++;\n\n      if (this.i <= x.data.total_pages) {\n        this.getAllPages();\n      } else this.organiseData();\n    });\n  }\n\n  componentDidMount() {\n    axios.get(this.url).then(x => {\n      this.apiData.push(...x.data.results);\n\n      if (this.i <= x.data.total_pages) {\n        this.getAllPages();\n      }\n    });\n  }\n\n  organiseData() {\n    let foreignFilms = this.apiData.filter(z => z.original_language !== 'en');\n    let englishFilms = this.apiData.filter(eng => eng.original_language === 'en');\n    let percentage = foreignFilms.length / this.apiData.length * 100;\n\n    if (!Number.isInteger(percentage)) {\n      percentage = percentage.toFixed(2);\n    }\n\n    this.setState({\n      foreignFilms,\n      englishFilms,\n      percentage\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(FilmInfo, {\n      foreign: this.state.foreignFilms,\n      english: this.state.englishFilms,\n      percentage: this.state.percentage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Recommend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(AddFilm, {\n      updater: this.refresher,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Calum/Documents/Coding/Foreign Language Films/src/Tmdb.js"],"names":["React","axios","FilmInfo","Recommend","AddFilm","Tmdb","Component","constructor","props","i","apiData","url","state","foreignFilms","englishFilms","percentage","refresher","get","then","x","push","data","results","organiseData","bind","getAllPages","total_pages","componentDidMount","filter","z","original_language","eng","length","Number","isInteger","toFixed","setState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,cAAP;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,eAAe,MAAMC,IAAN,SAAmBL,KAAK,CAACM,SAAzB,CAAmC;AAChDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAKnBC,CALmB,GAKf,CALe;AAAA,SAMnBC,OANmB,GAMT,EANS;AAAA,SAQnBC,GARmB,GASjB,iKATiB;AAAA,SAWnBC,KAXmB,GAWX;AACNC,MAAAA,YAAY,EAAE,EADR;AAENC,MAAAA,YAAY,EAAE,EAFR;AAGNC,MAAAA,UAAU,EAAE;AAHN,KAXW;;AAAA,SAoCnBC,SApCmB,GAoCP,MAAM;AAChBf,MAAAA,KAAK,CAACgB,GAAN,CAAU,KAAKN,GAAL,GAAW,0BAArB,EAAiDO,IAAjD,CAAuDC,CAAD,IAAO;AAC3D,aAAKT,OAAL,CAAaU,IAAb,CAAkBD,CAAC,CAACE,IAAF,CAAOC,OAAP,CAAe,CAAf,CAAlB;AACA,aAAKC,YAAL;AACD,OAHD;AAID,KAzCkB;;AAEjB,SAAKP,SAAL,GAAiB,KAAKA,SAAL,CAAeQ,IAAf,CAAoB,IAApB,CAAjB;AACD;;AAcDC,EAAAA,WAAW,GAAG;AACZxB,IAAAA,KAAK,CAACgB,GAAN,CAAU,KAAKN,GAAL,GAAW,QAAX,GAAsB,KAAKF,CAArC,EAAwCS,IAAxC,CAA8CC,CAAD,IAAO;AAClD,WAAKT,OAAL,CAAaU,IAAb,CAAkB,GAAGD,CAAC,CAACE,IAAF,CAAOC,OAA5B;AACA,WAAKb,CAAL;;AACA,UAAI,KAAKA,CAAL,IAAUU,CAAC,CAACE,IAAF,CAAOK,WAArB,EAAkC;AAChC,aAAKD,WAAL;AACD,OAFD,MAEO,KAAKF,YAAL;AACR,KAND;AAOD;;AAEDI,EAAAA,iBAAiB,GAAG;AAClB1B,IAAAA,KAAK,CAACgB,GAAN,CAAU,KAAKN,GAAf,EAAoBO,IAApB,CAA0BC,CAAD,IAAO;AAC9B,WAAKT,OAAL,CAAaU,IAAb,CAAkB,GAAGD,CAAC,CAACE,IAAF,CAAOC,OAA5B;;AACA,UAAI,KAAKb,CAAL,IAAUU,CAAC,CAACE,IAAF,CAAOK,WAArB,EAAkC;AAChC,aAAKD,WAAL;AACD;AACF,KALD;AAMD;;AASDF,EAAAA,YAAY,GAAG;AACb,QAAIV,YAAY,GAAG,KAAKH,OAAL,CAAakB,MAAb,CAAqBC,CAAD,IAAOA,CAAC,CAACC,iBAAF,KAAwB,IAAnD,CAAnB;AACA,QAAIhB,YAAY,GAAG,KAAKJ,OAAL,CAAakB,MAAb,CAChBG,GAAD,IAASA,GAAG,CAACD,iBAAJ,KAA0B,IADlB,CAAnB;AAGA,QAAIf,UAAU,GAAIF,YAAY,CAACmB,MAAb,GAAsB,KAAKtB,OAAL,CAAasB,MAApC,GAA8C,GAA/D;;AACA,QAAI,CAACC,MAAM,CAACC,SAAP,CAAiBnB,UAAjB,CAAL,EAAmC;AACjCA,MAAAA,UAAU,GAAGA,UAAU,CAACoB,OAAX,CAAmB,CAAnB,CAAb;AACD;;AACD,SAAKC,QAAL,CAAc;AAAEvB,MAAAA,YAAF;AAAgBC,MAAAA,YAAhB;AAA8BC,MAAAA;AAA9B,KAAd;AACD;;AAEDsB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,QAAD;AACE,MAAA,OAAO,EAAE,KAAKzB,KAAL,CAAWC,YADtB;AAEE,MAAA,OAAO,EAAE,KAAKD,KAAL,CAAWE,YAFtB;AAGE,MAAA,UAAU,EAAE,KAAKF,KAAL,CAAWG,UAHzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,eAOE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,OAAD;AAAS,MAAA,OAAO,EAAE,KAAKC,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAPF,CADF;AAcD;;AAvE+C","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport './custom.css';\r\nimport FilmInfo from './FilmInfo';\r\nimport Recommend from './Recommend';\r\nimport AddFilm from './AddFilm';\r\n\r\nexport default class Tmdb extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.refresher = this.refresher.bind(this);\r\n  }\r\n\r\n  i = 2;\r\n  apiData = [];\r\n\r\n  url =\r\n    'https://api.themoviedb.org/3/account/{account_id}/watchlist/movies?api_key=d1e40fddb73df31e61693cbf7ef094aa&session_id=d38ef9ba5672c0c9660f9bdd47b123bf609c2a13';\r\n\r\n  state = {\r\n    foreignFilms: [],\r\n    englishFilms: [],\r\n    percentage: 0,\r\n  };\r\n\r\n  getAllPages() {\r\n    axios.get(this.url + '&page=' + this.i).then((x) => {\r\n      this.apiData.push(...x.data.results);\r\n      this.i++;\r\n      if (this.i <= x.data.total_pages) {\r\n        this.getAllPages();\r\n      } else this.organiseData();\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get(this.url).then((x) => {\r\n      this.apiData.push(...x.data.results);\r\n      if (this.i <= x.data.total_pages) {\r\n        this.getAllPages();\r\n      }\r\n    });\r\n  }\r\n\r\n  refresher = () => {\r\n    axios.get(this.url + '&sort_by=created_at.desc').then((x) => {\r\n      this.apiData.push(x.data.results[0]);\r\n      this.organiseData();\r\n    });\r\n  };\r\n\r\n  organiseData() {\r\n    let foreignFilms = this.apiData.filter((z) => z.original_language !== 'en');\r\n    let englishFilms = this.apiData.filter(\r\n      (eng) => eng.original_language === 'en'\r\n    );\r\n    let percentage = (foreignFilms.length / this.apiData.length) * 100;\r\n    if (!Number.isInteger(percentage)) {\r\n      percentage = percentage.toFixed(2);\r\n    }\r\n    this.setState({ foreignFilms, englishFilms, percentage });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <FilmInfo\r\n          foreign={this.state.foreignFilms}\r\n          english={this.state.englishFilms}\r\n          percentage={this.state.percentage}\r\n        />\r\n        <br />\r\n        <div className=\"buttons\">\r\n          <Recommend />\r\n          <AddFilm updater={this.refresher} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}