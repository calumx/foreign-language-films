{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Calum\\\\documents\\\\coding\\\\foreign language films\\\\src\\\\Tmdb.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport \"./custom.css\";\nimport FilmInfo from './FilmInfo';\nimport Recommend from './Recommend';\nimport AddFilm from './AddFilm';\nexport default class Tmdb extends React.Component {\n  constructor(props) {\n    super(props);\n    this.i = 2;\n    this.apiData = [];\n    this.url = 'https://api.themoviedb.org/3/account/{account_id}/watchlist/movies?api_key=d1e40fddb73df31e61693cbf7ef094aa&session_id=d38ef9ba5672c0c9660f9bdd47b123bf609c2a13';\n    this.state = {\n      foreignFilms: [],\n      englishFilms: [],\n      percentage: 0,\n      newFilmAdded: false\n    };\n\n    this.refresher = () => {\n      this.setState({\n        newFilmAdded: !this.state.newFilmAdded\n      });\n      axios.get(this.url + \"&sort_by=created_at.desc\").then(x => {\n        this.apiData.push(x.data.results[0]);\n        this.organiseData();\n      });\n    };\n\n    this.refresher = this.refresher.bind(this);\n  }\n\n  yerMaw() {\n    console.log(\"start\" + this.i);\n    axios.get(this.url + \"&page=\" + this.i).then(x => {\n      this.apiData.push(...x.data.results);\n      this.i++;\n\n      if (this.i <= x.data.total_pages) {\n        this.yerMaw();\n      } else this.organiseData();\n    });\n  }\n\n  componentDidMount() {\n    axios.get(this.url).then(x => {\n      this.apiData.push(...x.data.results);\n\n      if (this.i <= x.data.total_pages) {\n        this.yerMaw();\n      }\n    });\n  }\n\n  organiseData() {\n    let foreignFilms = this.apiData.filter(z => z.original_language !== \"en\");\n    let englishFilms = this.apiData.filter(eng => eng.original_language == \"en\");\n    let percentage = foreignFilms.length / this.apiData.length * 100;\n\n    if (!Number.isInteger(percentage)) {\n      percentage = percentage.toFixed(2);\n    }\n\n    ;\n    this.setState({\n      foreignFilms,\n      englishFilms,\n      percentage\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FilmInfo, {\n      foreign: this.state.foreignFilms,\n      english: this.state.englishFilms,\n      percentage: this.state.percentage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Recommend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 38\n      }\n    }), /*#__PURE__*/React.createElement(AddFilm, {\n      updater: this.refresher,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 51\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Calum/documents/coding/foreign language films/src/Tmdb.js"],"names":["React","axios","FilmInfo","Recommend","AddFilm","Tmdb","Component","constructor","props","i","apiData","url","state","foreignFilms","englishFilms","percentage","newFilmAdded","refresher","setState","get","then","x","push","data","results","organiseData","bind","yerMaw","console","log","total_pages","componentDidMount","filter","z","original_language","eng","length","Number","isInteger","toFixed","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from  'axios';\r\nimport \"./custom.css\"\r\nimport FilmInfo from './FilmInfo';\r\nimport Recommend from './Recommend';\r\nimport AddFilm from './AddFilm';\r\n\r\nexport default class Tmdb extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.refresher = this.refresher.bind(this);\r\n    }\r\n\r\n    i = 2;\r\n    apiData =[];\r\n\r\n    url = 'https://api.themoviedb.org/3/account/{account_id}/watchlist/movies?api_key=d1e40fddb73df31e61693cbf7ef094aa&session_id=d38ef9ba5672c0c9660f9bdd47b123bf609c2a13';\r\n\r\n    state = {\r\n        foreignFilms: [],\r\n        englishFilms: [],\r\n        percentage: 0,\r\n        newFilmAdded: false\r\n    };\r\n\r\n    yerMaw() {\r\n        console.log(\"start\" + this.i);\r\n        axios.get(this.url + \"&page=\" + this.i)\r\n             .then(x => {\r\n             this.apiData.push(...x.data.results);\r\n             this.i++;\r\n             if (this.i <= x.data.total_pages) {this.yerMaw()}\r\n             else this.organiseData();\r\n             })\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        axios.get(this.url)\r\n        .then(x => {\r\n            this.apiData.push(...x.data.results);\r\n            if (this.i <= x.data.total_pages) { this.yerMaw() }\r\n        })\r\n    }\r\n\r\n    refresher = () => {\r\n        this.setState({newFilmAdded : !this.state.newFilmAdded})\r\n        axios.get(this.url + \"&sort_by=created_at.desc\")\r\n        .then(x => {\r\n            this.apiData.push(x.data.results[0]);\r\n            this.organiseData();\r\n        })\r\n    }\r\n\r\n    organiseData() {\r\n            let foreignFilms = this.apiData.filter (z => z.original_language !== \"en\");\r\n            let englishFilms = this.apiData.filter (eng => eng.original_language == \"en\");\r\n            let percentage = (foreignFilms.length/this.apiData.length) * 100;\r\n            if (!Number.isInteger(percentage)) { percentage = percentage.toFixed(2) };\r\n            this.setState({foreignFilms, englishFilms, percentage});\r\n    }\r\n\r\n    render() { \r\n\r\n        \r\n\r\n        return (\r\n        <div>\r\n            <FilmInfo foreign={this.state.foreignFilms} english={this.state.englishFilms} percentage={this.state.percentage} />\r\n            <br />\r\n            <div className=\"buttons\"><Recommend /><AddFilm updater={this.refresher} /></div>\r\n\r\n        </div>\r\n        ) \r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}