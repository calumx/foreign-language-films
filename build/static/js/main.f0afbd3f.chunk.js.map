{"version":3,"sources":["FilmInfo.js","RecsList.js","Recommend.js","Suggestions.js","FilmSearch.js","AddFilm.js","Tmdb.js","index.js"],"names":["FilmInfo","props","state","fill","hidden","prevProps","this","percentage","setState","foreign","length","english","id","style","width","React","Component","RecsList","useState","recTitle","recBlurb","className","Recommend","OverlayTrigger","rootClose","trigger","data-trigger","key","placement","overlay","Popover","Title","as","Content","Button","variant","Suggestions","show","setShow","filmClick","x","sendFilm","target","parentNode","getAttribute","options","filmID","results","slice","map","film","onClick","filmid","title","Modal","onHide","animation","Header","closeButton","Body","Footer","typed","FilmSearch","getInfo","handleInput","bind","query","search","value","placeholder","ref","input","onChange","updater","AddFilm","margin","Tmdb","pageNum","apiData","foreignFilms","englishFilms","refresher","filter","original_language","eng","Number","isInteger","toFixed","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f0afbd3f.chunk.js","sourcesContent":["import './custom.css';\r\nimport React from 'react';\r\n\r\nclass FilmInfo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fill: 0,\r\n      hidden: true,\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.percentage !== prevProps.percentage) {\r\n      this.setState({ fill: this.props.percentage });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>\r\n          You have watched {this.props.foreign.length} foreign language films\r\n          and {this.props.english.length} English language films.\r\n        </p>\r\n        <p>\r\n          This means that {this.props.percentage}% of your viewing has been in a\r\n          foreign language.\r\n        </p>\r\n\r\n        <p>\r\n          {this.props.percentage >= 50\r\n            ? 'Great! Keep it up. Check out a recommendation below.'\r\n            : 'You can do better. Why not get a recommendation below?'}\r\n        </p>\r\n\r\n        <div id=\"prbar\">\r\n          <div id=\"prpos\" style={{ width: this.state.fill + '%' }}></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilmInfo;\r\n","import React, { useState } from 'react';\r\nimport './custom.css';\r\n\r\nfunction RecsList() {\r\n  const [recTitle, setRecTitle] = useState('');\r\n  const [recBlurb, setRecBlurb] = useState('');\r\n\r\n  if (recTitle === '') {\r\n    //Make GET request to your recommendations list then\r\n    //Generate random number to serve as index of film from list (I used res.data.item_count to get the length of the list)\r\n    //setRecTitle and setRecBlurb appropriately (eg. res.data.items[index]['title'], res.data.iems[index]['overview'])\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p className=\"popover-title\">{recTitle}</p>\r\n      <p className=\"blurb\">{recBlurb}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RecsList;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport RecsList from './RecsList';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Popover from 'react-bootstrap/Popover';\r\nimport './custom.css';\r\n\r\nclass Recommend extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <OverlayTrigger\r\n          rootClose\r\n          trigger=\"click\"\r\n          data-trigger=\"focus\"\r\n          key=\"bottom\"\r\n          placement=\"bottom\"\r\n          overlay={\r\n            <Popover id=\"popover-positioned-bottom\">\r\n              <Popover.Title as=\"h3\">What about...</Popover.Title>\r\n              <Popover.Content>\r\n                <RecsList />\r\n              </Popover.Content>\r\n            </Popover>\r\n          }\r\n        >\r\n          <Button variant=\"primary\">Recommend me a film!</Button>\r\n        </OverlayTrigger>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Recommend;\r\n","import React, { useState } from 'react';\r\nimport './custom.css';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction Suggestions(props) {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const filmClick = (x) => {\r\n    setShow(true);\r\n    sendFilm(x.target.parentNode.getAttribute('filmid'));\r\n  };\r\n\r\n  let options = [];\r\n\r\n  const sendFilm = (filmID) => {\r\n    //Send POST request to your watchlist with params as follows:\r\n    //{ media_type: 'movie', media_id: filmID, watchlist: true }\r\n    //Then call \"props.updater()\"\r\n  };\r\n\r\n  if (props.results.length > 0) {\r\n    options = props.results.slice(0, 5).map((film) => (\r\n      <div\r\n        id=\"clickable-div\"\r\n        onClick={filmClick}\r\n        key={film.id}\r\n        filmid={film.id}\r\n      >\r\n        <li>{film.title}</li>\r\n      </div>\r\n    ));\r\n\r\n    return (\r\n      <div>\r\n        <Modal show={show} onHide={handleClose} animation={true}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Success!</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            Your film has been logged, and your data should now be updated.\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\">Okedoke</Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n        <div>{options}</div>\r\n      </div>\r\n    );\r\n  } else if (props.typed) {\r\n    return (\r\n      <div>\r\n        <p>No results</p>\r\n      </div>\r\n    );\r\n  } else return null;\r\n}\r\n\r\nexport default Suggestions;\r\n","import React from 'react';\r\nimport Suggestions from './Suggestions';\r\n\r\nclass FilmSearch extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleInput = this.handleInput.bind(this);\r\n    this.state = {\r\n      query: '',\r\n      results: [],\r\n      typed: false,\r\n    };\r\n  }\r\n\r\n  getInfo = () => {\r\n    //Send GET request to TMDB search function with \"&query=\" + this.state.query\r\n    //Set state \"results\" to the return, e.g. res.data.results\r\n    //Rendering is handled by the \"Suggestions\" component\r\n  };\r\n\r\n  handleInput() {\r\n    this.setState(\r\n      {\r\n        query: this.search.value,\r\n      },\r\n      () => {\r\n        if (this.state.query && this.state.query.length > 1) {\r\n          if (this.state.query.length % 2 === 0) {\r\n            this.getInfo();\r\n            this.setState({ typed: true });\r\n          }\r\n        } else if (!this.state.query) {\r\n          this.setState({ typed: false });\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <form>\r\n          <input\r\n            placeholder=\"Film name... \"\r\n            ref={(input) => (this.search = input)}\r\n            onChange={this.handleInput}\r\n          />\r\n          {this.state.query ? (\r\n            <Suggestions\r\n              results={this.state.results}\r\n              typed={this.state.typed}\r\n              updater={this.props.updater}\r\n            />\r\n          ) : (\r\n            <div />\r\n          )}\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilmSearch;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Popover from 'react-bootstrap/Popover';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport FilmSearch from './FilmSearch';\r\n\r\nclass AddFilm extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <OverlayTrigger\r\n          rootClose\r\n          trigger=\"click\"\r\n          data-trigger=\"focus\"\r\n          key=\"bottom\"\r\n          placement=\"bottom\"\r\n          overlay={\r\n            <Popover id=\"popover-positioned-bottom\" style={{ margin: 0 }}>\r\n              <Popover.Title as=\"h3\">Search film</Popover.Title>\r\n              <Popover.Content>\r\n                <FilmSearch updater={this.props.updater} />\r\n              </Popover.Content>\r\n            </Popover>\r\n          }\r\n        >\r\n          <Button variant=\"primary\">I watched something!</Button>\r\n        </OverlayTrigger>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default AddFilm;\r\n","import React from 'react';\r\nimport './custom.css';\r\nimport FilmInfo from './FilmInfo';\r\nimport Recommend from './Recommend';\r\nimport AddFilm from './AddFilm';\r\n\r\nexport default class Tmdb extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.refresher = this.refresher.bind(this);\r\n  }\r\n\r\n  pageNum = 2;\r\n  apiData = [];\r\n\r\n  state = {\r\n    foreignFilms: [],\r\n    englishFilms: [],\r\n    percentage: 0,\r\n  };\r\n\r\n  getAllPages() {\r\n    //Make GET request to your watchlist and append \"?page=\" + this.pageNum\r\n    //Spread results into apiData eg. this.apiData.push(...res.data.results)\r\n    //Increment this.pageNum\r\n    //if (this.pageNum <= res.data.total_pages) i.e. if there are still more pages to get then\r\n    //this.getAllPages() - call function again to get the other pages\r\n    //else this.organiseData() - prepare data for render.\r\n  }\r\n\r\n  componentDidMount() {\r\n    //Make GET request to your watchlist then\r\n    //Spread results into apiData eg. this.apiData.push(...res.data.results)\r\n    //if (this.pageNum <== res.data.total_pages) i.e. if your watchlist is spread across multiple pages then\r\n    //this.getAllPages() - call function to get the other pages\r\n    //else this.organiseData() - prepare data for render.\r\n  }\r\n\r\n  refresher = () => {\r\n    //Make GET request to your watchlist and append \"?sort_by=created_at.desc\"\r\n    //This ensures most recently added film will be the first entry.\r\n    //So push it into apiData e.g. this.apiData.push(res.data.results[0])\r\n    //Call this.organiseData() - prepare data for render.\r\n  };\r\n\r\n  organiseData() {\r\n    let foreignFilms = this.apiData.filter(\r\n      (film) => film.original_language !== 'en'\r\n    );\r\n    let englishFilms = this.apiData.filter(\r\n      (eng) => eng.original_language === 'en'\r\n    );\r\n    let percentage = (foreignFilms.length / this.apiData.length) * 100;\r\n    if (!Number.isInteger(percentage)) {\r\n      percentage = percentage.toFixed(2);\r\n    }\r\n    this.setState({ foreignFilms, englishFilms, percentage });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <FilmInfo\r\n          foreign={this.state.foreignFilms}\r\n          english={this.state.englishFilms}\r\n          percentage={this.state.percentage}\r\n        />\r\n        <br />\r\n        <div className=\"buttons\">\r\n          <Recommend />\r\n          <AddFilm updater={this.refresher} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport Tmdb from './Tmdb';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Tmdb />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}