{"version":3,"sources":["FilmInfo.js","RecsList.js","Recommend.js","Suggestions.js","FilmSearch.js","AddFilm.js","Tmdb.js","serviceWorker.js","index.js"],"names":["FilmInfo","props","state","fill","prevProps","this","percentage","setState","foreign","length","english","id","style","width","React","Component","RecsList","useState","blah","setBlah","blurb","setBlurb","axios","get","then","x","filmNum","Math","floor","random","data","item_count","console","log","items","Recommend","OverlayTrigger","rootClose","trigger","data-trigger","key","placement","overlay","Popover","Title","as","Content","Button","variant","Suggestions","show","setShow","filmClick","sendFilm","target","parentNode","getAttribute","options","post","updater","results","slice","map","onClick","filmid","title","Modal","onHide","animation","Header","closeButton","Body","Footer","typed","FilmSearch","url","getInfo","query","handleInput","bind","search","value","placeholder","ref","input","onChange","AddFilm","Tmdb","i","apiData","foreignFilms","englishFilms","refresher","push","organiseData","total_pages","getAllPages","filter","z","original_language","eng","Number","isInteger","toFixed","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2fd6daf5.chunk.js","sourcesContent":["import \"./custom.css\";\r\nimport React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass FilmInfo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        fill : 0\r\n    }\r\n}\r\n\r\ncomponentDidUpdate(prevProps) {\r\n    if (this.props.percentage !== prevProps.percentage) {\r\n    this.setState({fill: this.props.percentage});\r\n    }\r\n}\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div>\r\n            \r\n            <p>You have watched {this.props.foreign.length} foreign language films and {this.props.english.length} English language films.\r\n            </p>\r\n            <p>This means that {this.props.percentage}% of your viewing has been in a foreign language.</p>\r\n          \r\n            <p>{(this.props.percentage >= 50) ? \"Great! Keep it up. Check out a recommendation below.\" : \"You can do better. Why not get a recommendation below?\"}</p>\r\n\r\n            <div id=\"prbar\">\r\n              <div id=\"prpos\" style={{width: this.state.fill + \"%\"}}>\r\n                  </div>\r\n                  </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilmInfo;\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nfunction RecsList(props) {\r\n\r\n    const [blah, setBlah] = useState('');\r\n    const [blurb, setBlurb] = useState('');\r\n\r\n    if (blah == '') {\r\n        axios.get('https://api.themoviedb.org/3/list/138980?api_key=d1e40fddb73df31e61693cbf7ef094aa')\r\n        .then(x => {\r\n            let filmNum = Math.floor(Math.random() * (x.data.item_count));\r\n            console.log(x.data)\r\n            setBlurb('\\\"' + x.data.items[filmNum][\"overview\"] + '\\\"');\r\n          setBlah(x.data.items[filmNum][\"title\"] + \"?\");\r\n    \r\n    });\r\n}\r\n    \r\n    return (<div>\r\n        <p>{blah}</p>\r\n        <p>{blurb}</p>\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default RecsList;","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport RecsList from './RecsList';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Popover from 'react-bootstrap/Popover';\r\n\r\nclass Recommend extends React.Component {\r\n\r\nrender() {\r\n    return (\r\n<div>\r\n<OverlayTrigger\r\n            rootClose\r\n            trigger=\"click\"\r\n            data-trigger=\"focus\"\r\n            key=\"bottom\"\r\n            placement=\"bottom\"\r\n            overlay={\r\n                <Popover id=\"popover-positioned-bottom\">\r\n                <Popover.Title as=\"h3\">What about...</Popover.Title>\r\n            <Popover.Content>\r\n                <RecsList />\r\n            </Popover.Content>\r\n                </Popover>\r\n            }\r\n            >\r\n                <Button variant=\"primary\">Recommend me a film!</Button>\r\n            </OverlayTrigger>\r\n\r\n</div>\r\n\r\n    )\r\n}\r\n\r\n}\r\n\r\nexport default Recommend;","import React, { useState } from 'react';\r\nimport './custom.css';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport axios from 'axios';\r\n\r\nfunction Suggestions(props) {\r\n\r\n        const [show, setShow] = useState(false);\r\n\r\n        const handleClose = () => setShow(false);\r\n        const filmClick = (x) => (setShow(true), sendFilm(x.target.parentNode.getAttribute(\"filmid\")));\r\n\r\n        let options = [];\r\n\r\n        const sendFilm = (x) => {\r\n            axios.post('https://api.themoviedb.org/3/account/{account_id}/watchlist?api_key=d1e40fddb73df31e61693cbf7ef094aa&session_id=d38ef9ba5672c0c9660f9bdd47b123bf609c2a13', {\r\n                \"media_type\": \"movie\",\r\n                \"media_id\": x,\r\n                \"watchlist\": true\r\n            }).then(() => {props.updater()})  \r\n        }\r\n        \r\n    if (props.results.length > 0) {\r\n        options = props.results.slice(0, 5).map(x => (\r\n        <div id=\"clickable-div\" onClick={filmClick} key={x.id} filmid={x.id}><li>{x.title}</li></div>\r\n    ))\r\n    \r\n    return <div>\r\n        <Modal show={show} onHide = {handleClose} animation={true}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Success!</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>Your film has been logged, and your data should now be updated.</Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\">Okedoke</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n        <div>{options}</div>\r\n     \r\n        </div>;\r\n\r\n\r\n    } else if (props.typed) { \r\n        return <div><p>No results</p></div> \r\n    } else return null;\r\n        \r\n}\r\n\r\nexport default Suggestions;","import React from 'react';\r\nimport axios from 'axios';\r\nimport Suggestions from './Suggestions';\r\n\r\nclass FilmSearch extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.state = {\r\n            query: '',\r\n            results: [],\r\n            typed: false\r\n        }\r\n    }\r\n         url = \"https://api.themoviedb.org/3/search/movie?api_key=d1e40fddb73df31e61693cbf7ef094aa&query=\"\r\n    \r\n    getInfo = () => {\r\n        axios.get(this.url + this.state.query + \"&adult=false\")\r\n        .then(x => {\r\n            const results = x.data.results;\r\n            this.setState({results})\r\n        })\r\n\r\n    }\r\n\r\n    handleInput() {\r\n        this.setState({\r\n            query: this.search.value\r\n        }, () => {\r\n            if (this.state.query && this.state.query.length > 1) {\r\n                if (this.state.query.length % 2 === 0) {\r\n                    this.getInfo()\r\n                    this.setState({typed: true});\r\n                }\r\n            } else if (!this.state.query) {\r\n                this.setState({typed: false});\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <form>\r\n                <input placeholder=\"Film name... \"\r\n                ref={input => this.search = input}\r\n                onChange={this.handleInput} />\r\n                {(this.state.query) ? <Suggestions results={this.state.results} typed={this.state.typed} updater={this.props.updater} />: <div />}\r\n              </form>    \r\n        )\r\n    }\r\n}\r\n\r\nexport default FilmSearch;","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Popover from 'react-bootstrap/Popover';\r\nimport OverlayTrigger  from 'react-bootstrap/OverlayTrigger';\r\nimport FilmSearch from './FilmSearch';\r\n\r\nclass AddFilm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n\r\n        render() {\r\n        return (\r\n        <div>\r\n            <OverlayTrigger\r\n            rootClose\r\n            trigger=\"click\"\r\n            data-trigger=\"focus\"\r\n            key=\"bottom\"\r\n            placement=\"bottom\"\r\n            overlay={\r\n                <Popover id=\"popover-positioned-bottom\">\r\n                <Popover.Title as=\"h3\">Search film</Popover.Title>\r\n                <Popover.Content><FilmSearch updater={this.props.updater} /></Popover.Content>\r\n                </Popover>\r\n            }\r\n            >\r\n                <Button variant=\"primary\">I watched something!</Button>\r\n            </OverlayTrigger>\r\n            </div>\r\n        )}\r\n}\r\nexport default AddFilm;","import React from 'react';\r\nimport axios from  'axios';\r\nimport \"./custom.css\"\r\nimport FilmInfo from './FilmInfo';\r\nimport Recommend from './Recommend';\r\nimport AddFilm from './AddFilm';\r\n\r\nexport default class Tmdb extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.refresher = this.refresher.bind(this);\r\n    }\r\n\r\n    i = 2;\r\n    apiData =[];\r\n\r\n    url = 'https://api.themoviedb.org/3/account/{account_id}/watchlist/movies?api_key=d1e40fddb73df31e61693cbf7ef094aa&session_id=d38ef9ba5672c0c9660f9bdd47b123bf609c2a13';\r\n\r\n    state = {\r\n        foreignFilms: [],\r\n        englishFilms: [],\r\n        percentage: 0,\r\n    };\r\n\r\n    getAllPages() {\r\n        axios.get(this.url + \"&page=\" + this.i)\r\n             .then(x => {\r\n             this.apiData.push(...x.data.results);\r\n             this.i++;\r\n             if (this.i <= x.data.total_pages) {this.getAllPages()}\r\n             else this.organiseData();\r\n             })\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        axios.get(this.url)\r\n        .then(x => {\r\n            this.apiData.push(...x.data.results);\r\n            if (this.i <= x.data.total_pages) { this.getAllPages() }\r\n        })\r\n    }\r\n\r\n    refresher = () => {\r\n        axios.get(this.url + \"&sort_by=created_at.desc\")\r\n        .then(x => {\r\n            this.apiData.push(x.data.results[0]);\r\n            this.organiseData();\r\n        })\r\n    }\r\n\r\n    organiseData() {\r\n            let foreignFilms = this.apiData.filter (z => z.original_language !== \"en\");\r\n            let englishFilms = this.apiData.filter (eng => eng.original_language == \"en\");\r\n            let percentage = (foreignFilms.length/this.apiData.length) * 100;\r\n            if (!Number.isInteger(percentage)) { percentage = percentage.toFixed(2) };\r\n            this.setState({foreignFilms, englishFilms, percentage});\r\n    }\r\n\r\n    render() { \r\n        return (\r\n        <div>\r\n            <FilmInfo foreign={this.state.foreignFilms} english={this.state.englishFilms} percentage={this.state.percentage} />\r\n            <br />\r\n            <div className=\"buttons\"><Recommend /><AddFilm updater={this.refresher} /></div>\r\n\r\n        </div>\r\n        ) \r\n    }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css'\nimport Tmdb from './Tmdb';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n  <Tmdb />\n  </BrowserRouter>\n  , document.getElementById('root'));\n\n  serviceWorker.unregister();"],"sourceRoot":""}